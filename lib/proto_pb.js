/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.services.paint.gateway.RequestReceived', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.services.paint.gateway.TaskStateType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.displayName = 'proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    seedprefix: jspb.Message.getFieldWithDefault(msg, 7, ""),
    seedsuffix: jspb.Message.getFieldWithDefault(msg, 8, ""),
    newmodel: jspb.Message.getFieldWithDefault(msg, 9, false),
    renderpolicy: jspb.Message.getFieldWithDefault(msg, 10, ""),
    storagepolicy: jspb.Message.getFieldWithDefault(msg, 11, ""),
    autoack: jspb.Message.getFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask}
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask;
  return proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask}
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeedprefix(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeedsuffix(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNewmodel(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRenderpolicy(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoragepolicy(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeedprefix();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSeedsuffix();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNewmodel();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getRenderpolicy();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getStoragepolicy();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAutoack();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional string seedPrefix = 7;
 * @return {string}
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.getSeedprefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.setSeedprefix = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string seedSuffix = 8;
 * @return {string}
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.getSeedsuffix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.setSeedsuffix = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool newModel = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.getNewmodel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.setNewmodel = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string renderPolicy = 10;
 * @return {string}
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.getRenderpolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.setRenderpolicy = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string storagePolicy = 11;
 * @return {string}
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.getStoragepolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.setStoragepolicy = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool autoAck = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.getAutoack = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.name.jchein.portfolio.services.paint.gateway.CreatePaintArtworkTask.prototype.setAutoack = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.displayName = 'proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    autoack: jspb.Message.getFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask}
 */
proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask;
  return proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask}
 */
proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAutoack();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool autoAck = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.prototype.getAutoack = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.name.jchein.portfolio.services.paint.gateway.MonitorPaintArtworkTask.prototype.setAutoack = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.displayName = 'proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    autoack: jspb.Message.getFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask}
 */
proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask;
  return proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask}
 */
proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAutoack();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool autoAck = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.prototype.getAutoack = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.name.jchein.portfolio.services.paint.gateway.CancelPaintArtworkTask.prototype.setAutoack = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.displayName = 'proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask}
 */
proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask;
  return proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask}
 */
proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.services.paint.gateway.AcknowledgePaintArtworkTask.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.services.paint.gateway.RequestReceived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.services.paint.gateway.RequestReceived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.displayName = 'proto.name.jchein.portfolio.services.paint.gateway.RequestReceived';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.RequestReceived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.RequestReceived}
 */
proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.services.paint.gateway.RequestReceived;
  return proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.RequestReceived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.RequestReceived}
 */
proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.RequestReceived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.services.paint.gateway.RequestReceived.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.displayName = 'proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    taskstate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    percentpainted: jspb.Message.getFieldWithDefault(msg, 4, 0),
    message: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent}
 */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent;
  return proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent}
 */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {!proto.name.jchein.portfolio.services.paint.gateway.TaskStateType} */ (reader.readEnum());
      msg.setTaskstate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPercentpainted(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTaskstate();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPercentpainted();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TaskStateType taskState = 3;
 * @return {!proto.name.jchein.portfolio.services.paint.gateway.TaskStateType}
 */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.prototype.getTaskstate = function() {
  return /** @type {!proto.name.jchein.portfolio.services.paint.gateway.TaskStateType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.name.jchein.portfolio.services.paint.gateway.TaskStateType} value */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.prototype.setTaskstate = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 percentPainted = 4;
 * @return {number}
 */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.prototype.getPercentpainted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.prototype.setPercentpainted = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string message = 5;
 * @return {string}
 */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.services.paint.gateway.ArtworkTaskProgressEvent.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.name.jchein.portfolio.services.paint.gateway.TaskStateType = {
  IN_PAINT_QUEUE: 0,
  IN_UPLOAD_QUEUE: 1,
  PAINT_PROGRESS: 2,
  UPLOADING: 3,
  ERROR: 6,
  FINISHED: 7,
  CANCELLED: 8,
  DROPPED: 9,
  CLOSED: 10
};

goog.object.extend(exports, proto.name.jchein.portfolio.services.paint.gateway);
