/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.random_art.CommandReceived', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.random_art.InformationUpdate', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.random_art.PercentDoneUpdate', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.random_art.RetryableErrorUpdate', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask', null, global);
goog.exportSymbol('proto.name.jchein.portfolio.random_art.UpdateType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.displayName = 'proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seedprefix: jspb.Message.getFieldWithDefault(msg, 7, ""),
    seedsuffix: jspb.Message.getFieldWithDefault(msg, 8, ""),
    newmodel: jspb.Message.getFieldWithDefault(msg, 9, false),
    renderpolicy: jspb.Message.getFieldWithDefault(msg, 10, ""),
    stagingpolicy: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask;
  return proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeedprefix(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeedsuffix(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNewmodel(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRenderpolicy(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStagingpolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeedprefix();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSeedsuffix();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNewmodel();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getRenderpolicy();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getStagingpolicy();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string seedPrefix = 7;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.getSeedprefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.setSeedprefix = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string seedSuffix = 8;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.getSeedsuffix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.setSeedsuffix = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool newModel = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.getNewmodel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.setNewmodel = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string renderPolicy = 10;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.getRenderpolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.setRenderpolicy = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string stagingPolicy = 11;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.getStagingpolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.CreatePaintArtworkTask.prototype.setStagingpolicy = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.displayName = 'proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask;
  return proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 seq = 2;
 * @return {number}
 */
proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.name.jchein.portfolio.random_art.CancelPaintArtworkTask.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.displayName = 'proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask;
  return proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 seq = 2;
 * @return {number}
 */
proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.name.jchein.portfolio.random_art.SuspendPaintArtworkTask.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.displayName = 'proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask;
  return proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 seq = 2;
 * @return {number}
 */
proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.name.jchein.portfolio.random_art.ResumePaintArtworkTask.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.displayName = 'proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask;
  return proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 seq = 2;
 * @return {number}
 */
proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.name.jchein.portfolio.random_art.RetryPaintArtworkTask.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.displayName = 'proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask;
  return proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 seq = 2;
 * @return {number}
 */
proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.name.jchein.portfolio.random_art.AcknowledgePaintArtworkTask.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.random_art.CommandReceived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.random_art.CommandReceived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.random_art.CommandReceived.displayName = 'proto.name.jchein.portfolio.random_art.CommandReceived';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.random_art.CommandReceived.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.random_art.CommandReceived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.random_art.CommandReceived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.CommandReceived.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    accepted: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.random_art.CommandReceived}
 */
proto.name.jchein.portfolio.random_art.CommandReceived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.random_art.CommandReceived;
  return proto.name.jchein.portfolio.random_art.CommandReceived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.random_art.CommandReceived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.random_art.CommandReceived}
 */
proto.name.jchein.portfolio.random_art.CommandReceived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeq(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccepted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.random_art.CommandReceived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.random_art.CommandReceived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.random_art.CommandReceived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.CommandReceived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAccepted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.CommandReceived.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.CommandReceived.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 seq = 2;
 * @return {number}
 */
proto.name.jchein.portfolio.random_art.CommandReceived.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.name.jchein.portfolio.random_art.CommandReceived.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.CommandReceived.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.CommandReceived.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool accepted = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.name.jchein.portfolio.random_art.CommandReceived.prototype.getAccepted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.name.jchein.portfolio.random_art.CommandReceived.prototype.setAccepted = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.random_art.PercentDoneUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.random_art.PercentDoneUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.random_art.PercentDoneUpdate.displayName = 'proto.name.jchein.portfolio.random_art.PercentDoneUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.random_art.PercentDoneUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.random_art.PercentDoneUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.random_art.PercentDoneUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.PercentDoneUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    percentdone: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.random_art.PercentDoneUpdate}
 */
proto.name.jchein.portfolio.random_art.PercentDoneUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.random_art.PercentDoneUpdate;
  return proto.name.jchein.portfolio.random_art.PercentDoneUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.random_art.PercentDoneUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.random_art.PercentDoneUpdate}
 */
proto.name.jchein.portfolio.random_art.PercentDoneUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPercentdone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.random_art.PercentDoneUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.random_art.PercentDoneUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.random_art.PercentDoneUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.PercentDoneUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPercentdone();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.PercentDoneUpdate.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.PercentDoneUpdate.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 percentDone = 4;
 * @return {number}
 */
proto.name.jchein.portfolio.random_art.PercentDoneUpdate.prototype.getPercentdone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.name.jchein.portfolio.random_art.PercentDoneUpdate.prototype.setPercentdone = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.random_art.InformationUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.random_art.InformationUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.random_art.InformationUpdate.displayName = 'proto.name.jchein.portfolio.random_art.InformationUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.random_art.InformationUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.random_art.InformationUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.random_art.InformationUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.InformationUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.random_art.InformationUpdate}
 */
proto.name.jchein.portfolio.random_art.InformationUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.random_art.InformationUpdate;
  return proto.name.jchein.portfolio.random_art.InformationUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.random_art.InformationUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.random_art.InformationUpdate}
 */
proto.name.jchein.portfolio.random_art.InformationUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.random_art.InformationUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.random_art.InformationUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.random_art.InformationUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.InformationUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.InformationUpdate.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.InformationUpdate.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.random_art.RetryableErrorUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.name.jchein.portfolio.random_art.RetryableErrorUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.displayName = 'proto.name.jchein.portfolio.random_art.RetryableErrorUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.random_art.RetryableErrorUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    retryin: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.random_art.RetryableErrorUpdate}
 */
proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.random_art.RetryableErrorUpdate;
  return proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.random_art.RetryableErrorUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.random_art.RetryableErrorUpdate}
 */
proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRetryin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.random_art.RetryableErrorUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRetryin();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 retryIn = 4;
 * @return {number}
 */
proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.prototype.getRetryin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.prototype.setRetryin = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.oneofGroups_);
};
goog.inherits(proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.displayName = 'proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.oneofGroups_ = [[13,14,15]];

/**
 * @enum {number}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.UpdatebodyCase = {
  UPDATEBODY_NOT_SET: 0,
  PERCENTDONEBODY: 13,
  INFORMATIONBODY: 14,
  RETRYERRORBODY: 15
};

/**
 * @return {proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.UpdatebodyCase}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.getUpdatebodyCase = function() {
  return /** @type {proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.UpdatebodyCase} */(jspb.Message.computeOneofCase(this, proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.toObject = function(opt_includeInstance) {
  return proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updatetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    percentdonebody: (f = msg.getPercentdonebody()) && proto.name.jchein.portfolio.random_art.PercentDoneUpdate.toObject(includeInstance, f),
    informationbody: (f = msg.getInformationbody()) && proto.name.jchein.portfolio.random_art.InformationUpdate.toObject(includeInstance, f),
    retryerrorbody: (f = msg.getRetryerrorbody()) && proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask;
  return proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeq(value);
      break;
    case 3:
      var value = /** @type {!proto.name.jchein.portfolio.random_art.UpdateType} */ (reader.readEnum());
      msg.setUpdatetype(value);
      break;
    case 13:
      var value = new proto.name.jchein.portfolio.random_art.PercentDoneUpdate;
      reader.readMessage(value,proto.name.jchein.portfolio.random_art.PercentDoneUpdate.deserializeBinaryFromReader);
      msg.setPercentdonebody(value);
      break;
    case 14:
      var value = new proto.name.jchein.portfolio.random_art.InformationUpdate;
      reader.readMessage(value,proto.name.jchein.portfolio.random_art.InformationUpdate.deserializeBinaryFromReader);
      msg.setInformationbody(value);
      break;
    case 15:
      var value = new proto.name.jchein.portfolio.random_art.RetryableErrorUpdate;
      reader.readMessage(value,proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.deserializeBinaryFromReader);
      msg.setRetryerrorbody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUpdatetype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPercentdonebody();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.name.jchein.portfolio.random_art.PercentDoneUpdate.serializeBinaryToWriter
    );
  }
  f = message.getInformationbody();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.name.jchein.portfolio.random_art.InformationUpdate.serializeBinaryToWriter
    );
  }
  f = message.getRetryerrorbody();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.name.jchein.portfolio.random_art.RetryableErrorUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 seq = 2;
 * @return {number}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional UpdateType updateType = 3;
 * @return {!proto.name.jchein.portfolio.random_art.UpdateType}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.getUpdatetype = function() {
  return /** @type {!proto.name.jchein.portfolio.random_art.UpdateType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.name.jchein.portfolio.random_art.UpdateType} value */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.setUpdatetype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional PercentDoneUpdate percentDoneBody = 13;
 * @return {?proto.name.jchein.portfolio.random_art.PercentDoneUpdate}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.getPercentdonebody = function() {
  return /** @type{?proto.name.jchein.portfolio.random_art.PercentDoneUpdate} */ (
    jspb.Message.getWrapperField(this, proto.name.jchein.portfolio.random_art.PercentDoneUpdate, 13));
};


/** @param {?proto.name.jchein.portfolio.random_art.PercentDoneUpdate|undefined} value */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.setPercentdonebody = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.oneofGroups_[0], value);
};


proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.clearPercentdonebody = function() {
  this.setPercentdonebody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.hasPercentdonebody = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional InformationUpdate informationBody = 14;
 * @return {?proto.name.jchein.portfolio.random_art.InformationUpdate}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.getInformationbody = function() {
  return /** @type{?proto.name.jchein.portfolio.random_art.InformationUpdate} */ (
    jspb.Message.getWrapperField(this, proto.name.jchein.portfolio.random_art.InformationUpdate, 14));
};


/** @param {?proto.name.jchein.portfolio.random_art.InformationUpdate|undefined} value */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.setInformationbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.oneofGroups_[0], value);
};


proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.clearInformationbody = function() {
  this.setInformationbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.hasInformationbody = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RetryableErrorUpdate retryErrorBody = 15;
 * @return {?proto.name.jchein.portfolio.random_art.RetryableErrorUpdate}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.getRetryerrorbody = function() {
  return /** @type{?proto.name.jchein.portfolio.random_art.RetryableErrorUpdate} */ (
    jspb.Message.getWrapperField(this, proto.name.jchein.portfolio.random_art.RetryableErrorUpdate, 15));
};


/** @param {?proto.name.jchein.portfolio.random_art.RetryableErrorUpdate|undefined} value */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.setRetryerrorbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.oneofGroups_[0], value);
};


proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.clearRetryerrorbody = function() {
  this.setRetryerrorbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.name.jchein.portfolio.random_art.UpdatePaintArtworkTask.prototype.hasRetryerrorbody = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * @enum {number}
 */
proto.name.jchein.portfolio.random_art.UpdateType = {
  IN_PAINT_QUEUE: 0,
  IN_UPLOAD_QUEUE: 1,
  PAINT_PROGRESS: 2,
  UPLOADING: 3,
  PAUSED: 4,
  SOFT_ERROR: 5,
  FATAL_ERROR: 6,
  FINISHED: 7,
  CANCELLED: 8,
  DROPPED: 9,
  CLOSED: 10
};

goog.object.extend(exports, proto.name.jchein.portfolio.random_art);
